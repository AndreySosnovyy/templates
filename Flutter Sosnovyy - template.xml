<templateSet group="Flutter Sosnovyy - template">
  <template name="fb" value="// ignore_for_file: depend_on_referenced_packages&#10;import 'package:dio/dio.dart';&#10;import 'package:flutter_bloc_side_effect/side_effect_bloc.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$DECAP_SELECTION$_bloc.freezed.dart';&#10;part '$DECAP_SELECTION$_event.dart';&#10;part '$DECAP_SELECTION$_state.dart';&#10;&#10;class $CAP_SELECTION$Bloc extends Bloc&lt;$CAP_SELECTION$Event, $CAP_SELECTION$State&gt; {&#10;  $CAP_SELECTION$Bloc({&#10;    required $CAP_SELECTION$Repository repository,&#10;  })  : _repository = repository,&#10;        super($CAP_SELECTION$State.initial()) {&#10;    on&lt;$CAP_SELECTION$Event&gt;(&#10;      (event, emitter) =&gt; event.map(&#10;        $EVENT$$END$: (event) =&gt; _$EVENT$(event, emitter),&#10;      ),&#10;    );&#10;  }&#10;&#10;  final $CAP_SELECTION$Repository _repository;&#10;&#10;  Future&lt;void&gt; _$EVENT$(&#10;    _$CAP_EVENT$$CAP_SELECTION$Event event,&#10;    Emitter&lt;$CAP_SELECTION$State&gt; emitter,&#10;  ) async {&#10;    try {&#10;        &#10;    } on DioException catch (e, stackTrace) {&#10;        &#10;    } on Object catch (e, stackTrace) {&#10;        &#10;    }&#10;  }&#10;}&#10;" description="Freezed BLoC class" toReformat="false" toShortenFQNames="true">
    <variable name="DECAP_SELECTION" expression="decapitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_EVENT" expression="capitalize(EVENT)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fbe" value="part of '$DECAP_SELECTION$_bloc.dart';&#10;&#10;@freezed&#10;sealed class $CAP_SELECTION$Event with _$$$CAP_SELECTION$Event {&#10;  const $CAP_SELECTION$Event._();&#10;&#10;  const factory $CAP_SELECTION$Event.$END$$EVENT$() = _$CAP_EVENT$$CAP_SELECTION$Event;&#10;}&#10;" description="Freezed BLoC event class" toReformat="false" toShortenFQNames="true">
    <variable name="DECAP_SELECTION" expression="decapitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_EVENT" expression="capitalize(EVENT)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fbs" value="part of '$DECAP_SELECTION$_bloc.dart';&#10;&#10;@freezed&#10;sealed class $CAP_SELECTION$State with _$$$CAP_SELECTION$State {&#10;  const $CAP_SELECTION$State._();&#10;&#10;  const factory $CAP_SELECTION$State.initial() = _Initial$CAP_SELECTION$State;&#10;&#10;  const factory $CAP_SELECTION$State.loading() = _Loading$CAP_SELECTION$State;&#10;&#10;  const factory $CAP_SELECTION$State.idle() = _Idle$CAP_SELECTION$State;&#10;&#10;  const factory $CAP_SELECTION$State.error({&#10;    required String message,&#10;  }) = _Error$CAP_SELECTION$State;&#10;&#10;  bool get isInitial =&gt; maybeMap(&#10;        initial: (_) =&gt; true,&#10;        orElse: () =&gt; false,&#10;      );&#10;&#10;  bool get isLoading =&gt; maybeMap(&#10;        loading: (_) =&gt; true,&#10;        orElse: () =&gt; false,&#10;      );&#10;&#10;  bool get isIdle =&gt; maybeMap(&#10;        idle: (_) =&gt; true,&#10;        orElse: () =&gt; false,&#10;      );&#10;      &#10;  bool get isError =&gt; maybeMap(&#10;        error: (_) =&gt; true,&#10;        orElse: () =&gt; false,&#10;      );&#10;&#10;  String? get errorMessage =&gt; mapOrNull(&#10;        error: (state) =&gt; state.message,&#10;      );&#10;}&#10;" description="Freezed BLoC state class" toReformat="false" toShortenFQNames="true">
    <variable name="DECAP_SELECTION" expression="decapitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fdc" value="// ignore_for_file: invalid_annotation_target&#10;// ignore:  depend_on_referenced_packages&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$CLASS_NAME$.freezed.dart';&#10;part '$CLASS_NAME$.g.dart';&#10;&#10;@freezed&#10;class $CAP_SELECTION$ with _$$$CAP_SELECTION$ {&#10;  factory $CAP_SELECTION$({&#10;    ///&#10;    required final $END$&#10;  }) = _$CAP_SELECTION$;&#10;&#10;  factory $CAP_SELECTION$.fromJson(Map&lt;String, dynamic&gt; json) =&gt;&#10;      _$$$CAP_SELECTION$FromJson(json);&#10;}&#10;" description="Freezed data class with fromJson" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="fileNameWithoutExtension" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="repoimpl" value="class $CAP_SELECTION$RepositoryImpl implements $CAP_SELECTION$Repository {&#10;  $CAP_SELECTION$RepositoryImpl(this.client);&#10;&#10;  final $CAP_SELECTION$Client client;&#10;  &#10;  $END$&#10;}&#10;" description="Repository implementation class" toReformat="false" toShortenFQNames="true">
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="rtfclient" value="import 'package:dio/dio.dart';&#10;import 'package:retrofit/retrofit.dart';&#10;&#10;part '$SNAKE_SELECTION$_rest_client.g.dart';&#10;&#10;@RestApi()&#10;abstract class $CAP_CAMEL_SELECTION$RestClient {&#10;  factory $CAP_CAMEL_SELECTION$RestClient(Dio dio) = _$CAP_CAMEL_SELECTION$RestClient;&#10;&#10;  $END$&#10;}&#10;" description="REST client with Retrofit and Dio" toReformat="false" toShortenFQNames="true">
    <variable name="SNAKE_SELECTION" expression="snakeCase(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_CAMEL_SELECTION" expression="capitalize(camelCase(SELECTION))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="appcolors" value="final colors = Theme.of(context).extension&lt;AppColors&gt;()!;" description="Colors extension" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fbwse" value="// ignore_for_file: depend_on_referenced_packages&#10;import 'package:dio/dio.dart';&#10;import 'package:flutter_bloc_side_effect/side_effect_bloc.dart';&#10;import 'package:freezed_annotation/freezed_annotation.dart';&#10;&#10;part '$DECAP_SELECTION$_bloc.freezed.dart';&#10;part '$DECAP_SELECTION$_event.dart';&#10;part '$DECAP_SELECTION$_state.dart';&#10;part '$DECAP_SELECTION$_side_effect.dart';&#10;&#10;class $CAP_SELECTION$Bloc extends Bloc&lt;$CAP_SELECTION$Event, $CAP_SELECTION$State&gt;&#10;    with BlocSideEffectMixin&lt;$CAP_SELECTION$Event, $CAP_SELECTION$State, $CAP_SELECTION$SideEffect&gt; {&#10;  $CAP_SELECTION$Bloc({&#10;    required $CAP_SELECTION$Repository repository,&#10;  })  : _repository = repository,&#10;        super($CAP_SELECTION$State.initial()) {&#10;    on&lt;$CAP_SELECTION$Event&gt;(&#10;      (event, emitter) =&gt; event.map(&#10;        $EVENT$$END$: (event) =&gt; _$EVENT$(event, emitter),&#10;      ),&#10;    );&#10;  }&#10;&#10;  final $CAP_SELECTION$Repository _repository;&#10;&#10;  Future&lt;void&gt; _$EVENT$(&#10;    _$CAP_EVENT$$CAP_SELECTION$Event event,&#10;    Emitter&lt;$CAP_SELECTION$State&gt; emitter,&#10;  ) async {&#10;    try {&#10;        &#10;    } on DioException catch (e, stackTrace) {&#10;        &#10;    } on Object catch (e, stackTrace) {&#10;        &#10;    }&#10;  }&#10;}&#10;" description="Freezed BLoC class with side effects" toReformat="false" toShortenFQNames="true">
    <variable name="DECAP_SELECTION" expression="decapitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_EVENT" expression="capitalize(EVENT)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="repo" value="abstract class $CAP_SELECTION$RepositoryImpl {&#10;  $END$&#10;}&#10;" description="Repository absctract class" toReformat="false" toShortenFQNames="true">
    <variable name="CAP_SELECTION" expression="capitalize(SELECTION)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fbse" value="part of '$DECAP_SELECTION$_bloc.dart';&#10;&#10;@freezed&#10;sealed class $CAP_SELECTION$SideEffect with _$$$CAP_SELECTION$SideEffect {&#10;  const $CAP_SELECTION$SideEffect._();&#10;&#10;  const factory $CAP_SELECTION$SideEffect.error() = _Error$CAP_SELECTION$SideEffect;&#10;}&#10;" description="Freezed BLoC side effect class" toReformat="false" toShortenFQNames="true">
    <variable name="DECAP_SELECTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CAP_SELECTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>